import torch
import schnetpack as spk
import pytorch_lightning as pl
import os
import matplotlib.pyplot as plt
import numpy as np
from schnetpack import transform as trn

from model_output import HamiltonianOutput, MatrixOutput
from schnetpack import ModelOutput
from schnetpack.data import ASEAtomsData
from schnetpack.transform import ASENeighborList

def train_model(folder_path,model,dataset,epoch,name):
    
    callbacks = [
        spk.train.ModelCheckpoint(
            monitor="val_loss",
            mode="min",
            save_top_k=1,
            save_last=True,
            dirpath="checkpoints",
            filename="{epoch:02d}",
            model_path=os.path.join(folder_path, name)
        ),
        pl.callbacks.LearningRateMonitor(
          logging_interval="epoch"
        ),
        pl.callbacks.EarlyStopping(
          monitor="val_loss", 
          min_delta=1e-6, 
          patience=50, 
          verbose=False, 
          mode="min"
        )
    ]    
    
    args = {
        'callbacks': callbacks,
        'default_root_dir': './test/',
        'max_epochs': epoch,
        'devices': 1
      }

    if torch.cuda.is_available():
        args['accelerator'] = 'gpu'

    #if use_wandb:
        #wandb_project = os.environ['WANDB_PROJECT']
        #logger = WandbLogger(project=wandb_project)
        #args['logger'] = logger

    trainer = pl.Trainer(**args)

    trainer.fit(model, datamodule=dataset)
